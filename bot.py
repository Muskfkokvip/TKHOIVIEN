SN MUSK - OKVIP, [07/06/2025 9:01 CH]
import os
import logging
import pandas as pd
from io import BytesIO
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
from docx import Document as DocxDocument
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# C·∫•u h√¨nh Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("service_account.json", scope)
client = gspread.authorize(creds)

# M·ªü Google Sheet "CHECK CODE H√íM TH∆Ø", sheet "Sheet1"
spreadsheet = client.open("CHECK CODE H√íM TH∆Ø")
sheet = spreadsheet.worksheet("Sheet1")

logging.basicConfig(level=logging.INFO)

def extract_text_from_file(file_bytes: BytesIO, mime: str) -> str:
    try:
        if "text" in mime:
            return file_bytes.read().decode("utf-8", errors="ignore")
        elif "msword" in mime or "officedocument.wordprocessingml" in mime:
            doc = DocxDocument(file_bytes)
            return "\n".join([p.text for p in doc.paragraphs])
        elif "spreadsheetml" in mime:
            df = pd.read_excel(file_bytes)
            # l·∫•y to√†n b·ªô c·ªôt ƒë·∫ßu ti√™n n·ªëi th√†nh chu·ªói
            return "\n".join(df.iloc[:, 0].astype(str).dropna())
        else:
            return ""
    except Exception as e:
        logging.error(f"extract_text_from_file error: {e}")
        return ""

def parse_accounts(text: str):
    # T√°ch theo d√≤ng, d·∫•u ph·∫©y, x√≥a tr·∫Øng, lo·∫°i tr√πng gi·ªØ th·ª© t·ª±
    lines = [line.strip() for line in text.replace(",", "\n").splitlines() if line.strip()]
    unique_accounts = list(dict.fromkeys(lines))
    return unique_accounts

def filter_accounts_from_sheet(accounts):
    sheet_data = sheet.col_values(1)  # C·ªôt A trong Google Sheet
    received = [acc for acc in accounts if acc in sheet_data]
    not_received = [acc for acc in accounts if acc not in sheet_data]
    return received, not_received

async def process_and_reply(update: Update, raw_text: str):
    accounts = parse_accounts(raw_text)
    if len(accounts) == 0:
        await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n h·ª£p l·ªá ƒë·ªÉ l·ªçc.")
        return

    received, not_received = filter_accounts_from_sheet(accounts)

    response = f"üìã ƒê√£ l·ªçc: {len(accounts)} t√†i kho·∫£n\n"
    response += f"‚ùå T√†i kho·∫£n ƒë√£ nh·∫≠n: {len(received)}\n"
    response += f"‚úÖ T√†i kho·∫£n h·ª£p l·ªá ch∆∞a nh·∫≠n: {len(not_received)}\n"

    target = 200
    if len(not_received) == target:
        response += f"‚úÖ ƒê√£ ƒë·ªß s·ªë l∆∞·ª£ng {target} t√†i kho·∫£n h·ª£p l·ªá ch∆∞a nh·∫≠n."
    elif len(not_received) > target:
        response += f"‚ö†Ô∏è Th·ª´a {len(not_received)-target} t√†i kho·∫£n h·ª£p l·ªá ch∆∞a nh·∫≠n."
    else:
        response += f"‚ö†Ô∏è Thi·∫øu {target - len(not_received)} t√†i kho·∫£n h·ª£p l·ªá ch∆∞a nh·∫≠n."

    await update.message.reply_text(response)

    if len(not_received) == 0:
        await update.message.reply_text("‚ÑπÔ∏è Kh√¥ng c√≥ t√†i kho·∫£n ch∆∞a nh·∫≠n ƒë·ªÉ xu·∫•t file XLSX.")
        return

    # T·∫°o file XLSX ch·ªâ ch·ª©a t√†i kho·∫£n ch∆∞a nh·∫≠n
    df = pd.DataFrame({"T√†i kho·∫£n ch∆∞a nh·∫≠n": not_received})
    xlsx_file = BytesIO()
    with pd.ExcelWriter(xlsx_file, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    xlsx_file.seek(0)
    xlsx_file.name = "tai_khoan_chua_nhan.xlsx"

    await update.message.reply_document(document=xlsx_file)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # X·ª≠ l√Ω c·∫£ tin nh·∫Øn chuy·ªÉn ti·∫øp
    text = update.message.text or ""
    if not text.strip():
        await update.message.reply_text("‚ùå Tin nh·∫Øn r·ªóng, vui l√≤ng g·ª≠i d·ªØ li·ªáu h·ª£p l·ªá.")
        return
    await process_and_reply(update, text)

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    if not file:
        await update.message.reply_text("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c file h·ª£p l·ªá.")
        return

SN MUSK - OKVIP, [07/06/2025 9:01 CH]
file_obj = await file.get_file()
    file_bytes = BytesIO()
    await file_obj.download(out=file_bytes)
    file_bytes.seek(0)

    content = extract_text_from_file(file_bytes, file.mime_type)
    if not content.strip():
        await update.message.reply_text("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung t·ª´ file.")
        return

    await process_and_reply(update, content)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ G·ª≠i danh s√°ch t√†i kho·∫£n (text ho·∫∑c file) ƒë·ªÉ bot l·ªçc.\n"
                                    "- H·ªó tr·ª£ file: .xlsx, .docx, .txt\n"
                                    "- T√†i kho·∫£n c√°ch nhau d·∫•u ph·∫©y ho·∫∑c xu·ªëng d√≤ng.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.run_polling()

if name == "main":
    main()
